{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        }
      ],
      "name": "RoyaltyOverride",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getRoyaltyLookupAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "overrideAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        }
      ],
      "name": "setRoyaltyLookupAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getRoyaltyLookupAddress(address)": "de5488af",
    "overrideAllowed(address)": "70e06281",
    "setRoyaltyLookupAddress(address,address)": "26bd8982",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyOverride\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getRoyaltyLookupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"overrideAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"}],\"name\":\"setRoyaltyLookupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Royalty registry interface\",\"kind\":\"dev\",\"methods\":{\"getRoyaltyLookupAddress(address)\":{\"params\":{\"tokenAddress\":\"- The token address you are looking up the royalty for\"}},\"overrideAllowed(address)\":{\"params\":{\"tokenAddress\":\"- The token address you are looking up the royalty for\"}},\"setRoyaltyLookupAddress(address,address)\":{\"params\":{\"royaltyAddress\":\"- The royalty override address\",\"tokenAddress\":\"- The token address you wish to override\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRoyaltyLookupAddress(address)\":{\"notice\":\"Returns royalty address location.  Returns the tokenAddress by default, or the override if it exists\"},\"overrideAllowed(address)\":{\"notice\":\"Whether or not the message sender can override the royalty address for the given token address\"},\"setRoyaltyLookupAddress(address,address)\":{\"notice\":\"Override the location of where to look up royalty information for a given token contract. Allows for backwards compatibility and implementation of royalty logic for contracts that did not previously support them. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/manifold/IRoyaltyRegistry.sol\":\"IRoyaltyRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":500000},\"remappings\":[\":@manifoldxyz/=node_modules/@manifoldxyz/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@rari-capital/=node_modules/@rari-capital/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/manifold/IRoyaltyRegistry.sol\":{\"keccak256\":\"0x32ea0c0a3cc8cd7fd334ef04747f1405c09a930065f4aa6f515e618afea63029\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b69e99e57d04f1ead84ec8e8ee8289ba3fbe4aa559d9854cca3291bda797922a\",\"dweb:/ipfs/QmXzdAVp5PMNWaUErnJcig8VkFyna2ZUxsFv9jWT4ECVre\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.10+commit.fc410830"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "royaltyAddress",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyOverride",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyLookupAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "overrideAllowed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyLookupAddress"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getRoyaltyLookupAddress(address)": {
            "params": {
              "tokenAddress": "- The token address you are looking up the royalty for"
            }
          },
          "overrideAllowed(address)": {
            "params": {
              "tokenAddress": "- The token address you are looking up the royalty for"
            }
          },
          "setRoyaltyLookupAddress(address,address)": {
            "params": {
              "royaltyAddress": "- The royalty override address",
              "tokenAddress": "- The token address you wish to override"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getRoyaltyLookupAddress(address)": {
            "notice": "Returns royalty address location.  Returns the tokenAddress by default, or the override if it exists"
          },
          "overrideAllowed(address)": {
            "notice": "Whether or not the message sender can override the royalty address for the given token address"
          },
          "setRoyaltyLookupAddress(address,address)": {
            "notice": "Override the location of where to look up royalty information for a given token contract. Allows for backwards compatibility and implementation of royalty logic for contracts that did not previously support them. "
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@manifoldxyz/=node_modules/@manifoldxyz/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@rari-capital/=node_modules/@rari-capital/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 500000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/manifold/IRoyaltyRegistry.sol": "IRoyaltyRegistry"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/manifold/IRoyaltyRegistry.sol": {
        "keccak256": "0x32ea0c0a3cc8cd7fd334ef04747f1405c09a930065f4aa6f515e618afea63029",
        "urls": [
          "bzz-raw://b69e99e57d04f1ead84ec8e8ee8289ba3fbe4aa559d9854cca3291bda797922a",
          "dweb:/ipfs/QmXzdAVp5PMNWaUErnJcig8VkFyna2ZUxsFv9jWT4ECVre"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/manifold/IRoyaltyRegistry.sol",
    "id": 1440,
    "exportedSymbols": {
      "IERC165": [
        57618
      ],
      "IRoyaltyRegistry": [
        1439
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:1369:9",
    "nodes": [
      {
        "id": 1402,
        "nodeType": "PragmaDirective",
        "src": "33:23:9",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 1403,
        "nodeType": "ImportDirective",
        "src": "85:65:9",
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 1440,
        "sourceUnit": 57619,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 1439,
        "nodeType": "ContractDefinition",
        "src": "195:1207:9",
        "nodes": [
          {
            "id": 1414,
            "nodeType": "EventDefinition",
            "src": "241:83:9",
            "anonymous": false,
            "name": "RoyaltyOverride",
            "nameLocation": "247:15:9",
            "parameters": {
              "id": 1413,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1408,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "271:5:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1414,
                  "src": "263:13:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1407,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "263:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1410,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "286:12:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1414,
                  "src": "278:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "278:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1412,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "royaltyAddress",
                  "nameLocation": "308:14:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1414,
                  "src": "300:22:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1411,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "300:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "262:61:9"
            }
          },
          {
            "id": 1422,
            "nodeType": "FunctionDefinition",
            "src": "713:88:9",
            "documentation": {
              "id": 1415,
              "nodeType": "StructuredDocumentation",
              "src": "330:378:9",
              "text": " Override the location of where to look up royalty information for a given token contract.\n Allows for backwards compatibility and implementation of royalty logic for contracts that did not previously support them.\n \n @param tokenAddress    - The token address you wish to override\n @param royaltyAddress  - The royalty override address"
            },
            "functionSelector": "26bd8982",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRoyaltyLookupAddress",
            "nameLocation": "722:23:9",
            "parameters": {
              "id": 1420,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1417,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "754:12:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1422,
                  "src": "746:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1416,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "746:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1419,
                  "mutability": "mutable",
                  "name": "royaltyAddress",
                  "nameLocation": "776:14:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1422,
                  "src": "768:22:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1418,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "768:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "745:46:9"
            },
            "returnParameters": {
              "id": 1421,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "800:0:9"
            },
            "scope": 1439,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 1430,
            "nodeType": "FunctionDefinition",
            "src": "1023:86:9",
            "documentation": {
              "id": 1423,
              "nodeType": "StructuredDocumentation",
              "src": "807:211:9",
              "text": " Returns royalty address location.  Returns the tokenAddress by default, or the override if it exists\n @param tokenAddress    - The token address you are looking up the royalty for"
            },
            "functionSelector": "de5488af",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRoyaltyLookupAddress",
            "nameLocation": "1032:23:9",
            "parameters": {
              "id": 1426,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1425,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "1064:12:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1430,
                  "src": "1056:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1424,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1056:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1055:22:9"
            },
            "returnParameters": {
              "id": 1429,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1428,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1430,
                  "src": "1100:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1427,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1100:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1099:9:9"
            },
            "scope": 1439,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 1438,
            "nodeType": "FunctionDefinition",
            "src": "1325:75:9",
            "documentation": {
              "id": 1431,
              "nodeType": "StructuredDocumentation",
              "src": "1115:205:9",
              "text": " Whether or not the message sender can override the royalty address for the given token address\n @param tokenAddress    - The token address you are looking up the royalty for"
            },
            "functionSelector": "70e06281",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "overrideAllowed",
            "nameLocation": "1334:15:9",
            "parameters": {
              "id": 1434,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1433,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "1358:12:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 1438,
                  "src": "1350:20:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1432,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1350:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1349:22:9"
            },
            "returnParameters": {
              "id": 1437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1436,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1438,
                  "src": "1394:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1435,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1394:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1393:6:9"
            },
            "scope": 1439,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1405,
              "name": "IERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 57618,
              "src": "225:7:9"
            },
            "id": 1406,
            "nodeType": "InheritanceSpecifier",
            "src": "225:7:9"
          }
        ],
        "canonicalName": "IRoyaltyRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 1404,
          "nodeType": "StructuredDocumentation",
          "src": "152:42:9",
          "text": " @dev Royalty registry interface"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          1439,
          57618
        ],
        "name": "IRoyaltyRegistry",
        "nameLocation": "205:16:9",
        "scope": 1440,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 9
}